name: Compile C Program to ARM64 Binary and Test

on:
  push:
    branches:
      - main  # Or your branch name
  pull_request:
    branches:
      - main  # Or your branch name

jobs:
  build:
    runs-on: ubuntu-latest  # Use an x86_64 runner to emulate ARM64
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Docker buildx for ARM64 emulation
        uses: docker/setup-buildx-action@v2
        
      - name: Enable QEMU for ARM64 emulation
        run: |
          docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

      - name: Build ARM64 binary using Docker
        run: |
          # Use docker run with ARM64 emulation
          docker run --rm --platform linux/arm64 \
            -v $(pwd):/workspace \
            -w /workspace \
            gcc:latest \
            bash -c "
              apt-get update && apt-get install -y \
                libcurl4-openssl-dev:arm64 \
                libjson-c-dev:arm64 \
                libc6:arm64 \
                && gcc -o filewatcher_arm64 filewatcher.c -lcurl -ljson-c"
      
      - name: Upload ARM64 binary as artifact
        uses: actions/upload-artifact@v4
        with:
          name: arm64-binary
          path: filewatcher_arm64

      - name: Run tests with ARM64 binary
        run: |
          # Test the compiled ARM64 binary with config.json
          # Ensure config.json is available in the workspace or adjust the path accordingly
          ./filewatcher_arm64 /workspace/config.json
        env:
          CONFIG_PATH: /workspace/config.json  # Pass path to config.json if needed

      - name: Check test results (example)
        run: |
          # You can check for any specific output or log here to confirm the program is working
          # For example, you can check for a specific output in the logs.
          if grep -q "expected_output" test_log.txt; then
            echo "Test passed!"
          else
            echo "Test failed!"
            exit 1
          fi
